class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        int dir = 0;
        int top = 0;
        int down = m-1;
        int left = 0;
        int right = n-1;
        vector<int> ans;
        // dir = 0 left to right
        // dir= 1 top to down
        // dir = 2 right to left
        // dir = 3 down to top
        while(top <= down && left <= right){
            if(dir == 0){ 
                for(int i = left; i<= right; i++){
                    ans.push_back(matrix[top][i]);
                }
                top ++;
            }
            else if(dir == 1){
                for(int i = top; i <= down; i++){
                    ans.push_back(matrix[i][right]);
                }
                right--;
            }
            else if(dir == 2){
                for(int i = right; i >= left; i--){
                    ans.push_back(matrix[down][i]);
                }
                down--;
            }
            else if(dir == 3){
                for(int i = down; i >= top; i--){
                    ans.push_back(matrix[i][left]);
                }
                left ++;
            }
            dir = (dir +1) % 4;
        }
        return ans;
    }
};